{
  "Resources": {
    "Vpc8378EB38": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "GithubActionsRunnerStack/Vpc"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "GithubActionsRunnerStack/Vpc/Resource"
      }
    },
    "VpcPublicSubnetSubnet1SubnetC1C3749F": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "AvailabilityZone": "eu-north-1a",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "PublicSubnet"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "GithubActionsRunnerStack/Vpc/PublicSubnetSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "GithubActionsRunnerStack/Vpc/PublicSubnetSubnet1/Subnet"
      }
    },
    "VpcPublicSubnetSubnet1RouteTable54741E8C": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "GithubActionsRunnerStack/Vpc/PublicSubnetSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "GithubActionsRunnerStack/Vpc/PublicSubnetSubnet1/RouteTable"
      }
    },
    "VpcPublicSubnetSubnet1RouteTableAssociation12F076E3": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPublicSubnetSubnet1RouteTable54741E8C"
        },
        "SubnetId": {
          "Ref": "VpcPublicSubnetSubnet1SubnetC1C3749F"
        }
      },
      "Metadata": {
        "aws:cdk:path": "GithubActionsRunnerStack/Vpc/PublicSubnetSubnet1/RouteTableAssociation"
      }
    },
    "VpcPublicSubnetSubnet1DefaultRoute8657BB78": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPublicSubnetSubnet1RouteTable54741E8C"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcIGWD7BA715C"
        }
      },
      "DependsOn": ["VpcVPCGWBF912B6E"],
      "Metadata": {
        "aws:cdk:path": "GithubActionsRunnerStack/Vpc/PublicSubnetSubnet1/DefaultRoute"
      }
    },
    "VpcIGWD7BA715C": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "GithubActionsRunnerStack/Vpc"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "GithubActionsRunnerStack/Vpc/IGW"
      }
    },
    "VpcVPCGWBF912B6E": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "InternetGatewayId": {
          "Ref": "VpcIGWD7BA715C"
        }
      },
      "Metadata": {
        "aws:cdk:path": "GithubActionsRunnerStack/Vpc/VPCGW"
      }
    },
    "AsgInstanceSecurityGroupC53F1492": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "GithubActionsRunnerStack/Asg/InstanceSecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "GithubActionsRunnerStack/Asg"
          }
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38"
        }
      },
      "Metadata": {
        "aws:cdk:path": "GithubActionsRunnerStack/Asg/InstanceSecurityGroup/Resource"
      }
    },
    "AsgInstanceRole7946982D": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "GithubActionsRunnerStack/Asg"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "GithubActionsRunnerStack/Asg/InstanceRole/Resource"
      }
    },
    "AsgInstanceRoleDefaultPolicy16A5BCED": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ecs:DeregisterContainerInstance",
                "ecs:RegisterContainerInstance",
                "ecs:Submit*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": ["GitHubActionsRunnerCluster5CD8DD12", "Arn"]
              }
            },
            {
              "Action": ["ecs:Poll", "ecs:StartTelemetrySession"],
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": ["GitHubActionsRunnerCluster5CD8DD12", "Arn"]
                  }
                }
              },
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "ecs:DiscoverPollEndpoint",
                "ecr:GetAuthorizationToken",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "AsgInstanceRoleDefaultPolicy16A5BCED",
        "Roles": [
          {
            "Ref": "AsgInstanceRole7946982D"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "GithubActionsRunnerStack/Asg/InstanceRole/DefaultPolicy/Resource"
      }
    },
    "AsgInstanceProfileBCEDB827": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "AsgInstanceRole7946982D"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "GithubActionsRunnerStack/Asg/InstanceProfile"
      }
    },
    "AsgLaunchConfig6D4F96BB": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": {
          "Ref": "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter"
        },
        "InstanceType": "t3.micro",
        "IamInstanceProfile": {
          "Ref": "AsgInstanceProfileBCEDB827"
        },
        "SecurityGroups": [
          {
            "Fn::GetAtt": ["AsgInstanceSecurityGroupC53F1492", "GroupId"]
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\necho ECS_CLUSTER=",
                {
                  "Ref": "GitHubActionsRunnerCluster5CD8DD12"
                },
                " >> /etc/ecs/ecs.config\nsudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP\nsudo service iptables save\necho ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config"
              ]
            ]
          }
        }
      },
      "DependsOn": [
        "AsgInstanceRoleDefaultPolicy16A5BCED",
        "AsgInstanceRole7946982D"
      ],
      "Metadata": {
        "aws:cdk:path": "GithubActionsRunnerStack/Asg/LaunchConfig"
      }
    },
    "AsgASGD1D7B4E2": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "MaxSize": "10",
        "MinSize": "0",
        "LaunchConfigurationName": {
          "Ref": "AsgLaunchConfig6D4F96BB"
        },
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": "GithubActionsRunnerStack/Asg"
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "VpcPublicSubnetSubnet1SubnetC1C3749F"
          }
        ]
      },
      "UpdatePolicy": {
        "AutoScalingScheduledAction": {
          "IgnoreUnmodifiedGroupSizeProperties": true
        }
      },
      "Metadata": {
        "aws:cdk:path": "GithubActionsRunnerStack/Asg/ASG"
      }
    },
    "AsgDrainECSHookFunctionServiceRoleE29C0A10": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "GithubActionsRunnerStack/Asg"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "GithubActionsRunnerStack/Asg/DrainECSHook/Function/ServiceRole/Resource"
      }
    },
    "AsgDrainECSHookFunctionServiceRoleDefaultPolicy5A6287A8": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2:DescribeInstances",
                "ec2:DescribeInstanceAttribute",
                "ec2:DescribeInstanceStatus",
                "ec2:DescribeHosts"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": "autoscaling:CompleteLifecycleAction",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":autoscaling:eu-north-1:466464767973:autoScalingGroup:*:autoScalingGroupName/",
                    {
                      "Ref": "AsgASGD1D7B4E2"
                    }
                  ]
                ]
              }
            },
            {
              "Action": ["ecs:DescribeContainerInstances", "ecs:DescribeTasks"],
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": ["GitHubActionsRunnerCluster5CD8DD12", "Arn"]
                  }
                }
              },
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "ecs:ListContainerInstances",
                "ecs:SubmitContainerStateChange",
                "ecs:SubmitTaskStateChange"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": ["GitHubActionsRunnerCluster5CD8DD12", "Arn"]
              }
            },
            {
              "Action": ["ecs:UpdateContainerInstancesState", "ecs:ListTasks"],
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": ["GitHubActionsRunnerCluster5CD8DD12", "Arn"]
                  }
                }
              },
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "AsgDrainECSHookFunctionServiceRoleDefaultPolicy5A6287A8",
        "Roles": [
          {
            "Ref": "AsgDrainECSHookFunctionServiceRoleE29C0A10"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "GithubActionsRunnerStack/Asg/DrainECSHook/Function/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "AsgDrainECSHookFunctionB279B86D": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "import boto3, json, os, time\n\necs = boto3.client('ecs')\nautoscaling = boto3.client('autoscaling')\n\n\ndef lambda_handler(event, context):\n  print(json.dumps(event))\n  cluster = os.environ['CLUSTER']\n  snsTopicArn = event['Records'][0]['Sns']['TopicArn']\n  lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])\n  instance_id = lifecycle_event.get('EC2InstanceId')\n  if not instance_id:\n    print('Got event without EC2InstanceId: %s', json.dumps(event))\n    return\n\n  instance_arn = container_instance_arn(cluster, instance_id)\n  print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))\n\n  if not instance_arn:\n    return\n\n  task_arns = container_instance_task_arns(cluster, instance_arn)\n  \n  if task_arns:\n    print('Instance ARN %s has task ARNs %s' % (instance_arn, ', '.join(task_arns)))\n\n  while has_tasks(cluster, instance_arn, task_arns):\n    time.sleep(10)\n\n  try:\n    print('Terminating instance %s' % instance_id)\n    autoscaling.complete_lifecycle_action(\n        LifecycleActionResult='CONTINUE',\n        **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))\n  except Exception as e:\n    # Lifecycle action may have already completed.\n    print(str(e))\n\n\ndef container_instance_arn(cluster, instance_id):\n  \"\"\"Turn an instance ID into a container instance ARN.\"\"\"\n  arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']\n  if not arns:\n    return None\n  return arns[0]\n\ndef container_instance_task_arns(cluster, instance_arn):\n  \"\"\"Fetch tasks for a container instance ARN.\"\"\"\n  arns = ecs.list_tasks(cluster=cluster, containerInstance=instance_arn)['taskArns']\n  return arns\n\ndef has_tasks(cluster, instance_arn, task_arns):\n  \"\"\"Return True if the instance is running tasks for the given cluster.\"\"\"\n  instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']\n  if not instances:\n    return False\n  instance = instances[0]\n\n  if instance['status'] == 'ACTIVE':\n    # Start draining, then try again later\n    set_container_instance_to_draining(cluster, instance_arn)\n    return True\n\n  task_count = None\n\n  if task_arns:\n    # Fetch details for tasks running on the container instance\n    tasks = ecs.describe_tasks(cluster=cluster, tasks=task_arns)['tasks']\n    if tasks:\n      # Consider any non-stopped tasks as running\n      task_count = sum(task['lastStatus'] != 'STOPPED' for task in tasks) + instance['pendingTasksCount']\n  \n  if not task_count:\n    # Fallback to instance task counts if detailed task information is unavailable\n    task_count = instance['runningTasksCount'] + instance['pendingTasksCount']\n    \n  print('Instance %s has %s tasks' % (instance_arn, task_count))\n\n  return task_count > 0\n\ndef set_container_instance_to_draining(cluster, instance_arn):\n  ecs.update_container_instances_state(\n      cluster=cluster,\n      containerInstances=[instance_arn], status='DRAINING')\n\n\ndef pick(dct, *keys):\n  \"\"\"Pick a subset of a dict.\"\"\"\n  return {k: v for k, v in dct.items() if k in keys}\n"
        },
        "Role": {
          "Fn::GetAtt": ["AsgDrainECSHookFunctionServiceRoleE29C0A10", "Arn"]
        },
        "Environment": {
          "Variables": {
            "CLUSTER": {
              "Ref": "GitHubActionsRunnerCluster5CD8DD12"
            }
          }
        },
        "Handler": "index.lambda_handler",
        "Runtime": "python3.6",
        "Tags": [
          {
            "Key": "Name",
            "Value": "GithubActionsRunnerStack/Asg"
          }
        ],
        "Timeout": 310
      },
      "DependsOn": [
        "AsgDrainECSHookFunctionServiceRoleDefaultPolicy5A6287A8",
        "AsgDrainECSHookFunctionServiceRoleE29C0A10"
      ],
      "Metadata": {
        "aws:cdk:path": "GithubActionsRunnerStack/Asg/DrainECSHook/Function/Resource"
      }
    },
    "AsgDrainECSHookFunctionAllowInvokeGithubActionsRunnerStackAsgLifecycleHookDrainHookTopicD8800ABF9C200B11": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": ["AsgDrainECSHookFunctionB279B86D", "Arn"]
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Ref": "AsgLifecycleHookDrainHookTopicF022C93B"
        }
      },
      "Metadata": {
        "aws:cdk:path": "GithubActionsRunnerStack/Asg/DrainECSHook/Function/AllowInvoke:GithubActionsRunnerStackAsgLifecycleHookDrainHookTopicD8800ABF"
      }
    },
    "AsgDrainECSHookFunctionTopicE4D99605": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Protocol": "lambda",
        "TopicArn": {
          "Ref": "AsgLifecycleHookDrainHookTopicF022C93B"
        },
        "Endpoint": {
          "Fn::GetAtt": ["AsgDrainECSHookFunctionB279B86D", "Arn"]
        }
      },
      "Metadata": {
        "aws:cdk:path": "GithubActionsRunnerStack/Asg/DrainECSHook/Function/Topic/Resource"
      }
    },
    "AsgLifecycleHookDrainHookTopicF022C93B": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "GithubActionsRunnerStack/Asg"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "GithubActionsRunnerStack/Asg/LifecycleHookDrainHook/Topic/Resource"
      }
    },
    "AsgLifecycleHookDrainHookRoleC6879CD5": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "autoscaling.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "GithubActionsRunnerStack/Asg"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "GithubActionsRunnerStack/Asg/LifecycleHookDrainHook/Role/Resource"
      }
    },
    "AsgLifecycleHookDrainHookRoleDefaultPolicyE3034793": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "AsgLifecycleHookDrainHookTopicF022C93B"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "AsgLifecycleHookDrainHookRoleDefaultPolicyE3034793",
        "Roles": [
          {
            "Ref": "AsgLifecycleHookDrainHookRoleC6879CD5"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "GithubActionsRunnerStack/Asg/LifecycleHookDrainHook/Role/DefaultPolicy/Resource"
      }
    },
    "AsgLifecycleHookDrainHookB048D76B": {
      "Type": "AWS::AutoScaling::LifecycleHook",
      "Properties": {
        "AutoScalingGroupName": {
          "Ref": "AsgASGD1D7B4E2"
        },
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
        "DefaultResult": "CONTINUE",
        "HeartbeatTimeout": 300,
        "NotificationTargetARN": {
          "Ref": "AsgLifecycleHookDrainHookTopicF022C93B"
        },
        "RoleARN": {
          "Fn::GetAtt": ["AsgLifecycleHookDrainHookRoleC6879CD5", "Arn"]
        }
      },
      "DependsOn": [
        "AsgLifecycleHookDrainHookRoleDefaultPolicyE3034793",
        "AsgLifecycleHookDrainHookRoleC6879CD5"
      ],
      "Metadata": {
        "aws:cdk:path": "GithubActionsRunnerStack/Asg/LifecycleHookDrainHook/Resource"
      }
    },
    "AsgCapacityProvider760D11D9": {
      "Type": "AWS::ECS::CapacityProvider",
      "Properties": {
        "AutoScalingGroupProvider": {
          "AutoScalingGroupArn": {
            "Ref": "AsgASGD1D7B4E2"
          },
          "ManagedScaling": {
            "Status": "ENABLED",
            "TargetCapacity": 100
          },
          "ManagedTerminationProtection": "DISABLED"
        },
        "Name": "GitHubActionsRunnerCapacityProvider"
      },
      "Metadata": {
        "aws:cdk:path": "GithubActionsRunnerStack/AsgCapacityProvider/AsgCapacityProvider"
      }
    },
    "GitHubActionsRunnerCluster5CD8DD12": {
      "Type": "AWS::ECS::Cluster",
      "Metadata": {
        "aws:cdk:path": "GithubActionsRunnerStack/GitHubActionsRunnerCluster/Resource"
      }
    },
    "GitHubActionsRunnerCluster23B95B13": {
      "Type": "AWS::ECS::ClusterCapacityProviderAssociations",
      "Properties": {
        "CapacityProviders": [
          {
            "Ref": "AsgCapacityProvider760D11D9"
          }
        ],
        "Cluster": {
          "Ref": "GitHubActionsRunnerCluster5CD8DD12"
        },
        "DefaultCapacityProviderStrategy": []
      },
      "Metadata": {
        "aws:cdk:path": "GithubActionsRunnerStack/GitHubActionsRunnerCluster/GitHubActionsRunnerCluster"
      }
    },
    "GitHubActionsRunnerTaskDefinitionTaskRoleAF56F3C8": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "GithubActionsRunnerStack/GitHubActionsRunnerTaskDefinition/TaskRole/Resource"
      }
    },
    "GitHubActionsRunnerTaskDefinitionAEB9D8FA": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "Essential": true,
            "Image": {
              "Fn::Sub": "466464767973.dkr.ecr.eu-north-1.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-466464767973-eu-north-1:f432976fe6b632c39683d04f5dec3471308bbbc42e3f44e7bf5a438e8d7508c4"
            },
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "ContainerLogGroupE6FD74A4"
                },
                "awslogs-stream-prefix": "GitHubActionsRunner",
                "awslogs-region": "eu-north-1"
              }
            },
            "MemoryReservation": 512,
            "Name": "Container"
          }
        ],
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "GitHubActionsRunnerTaskDefinitionExecutionRoleF608A770",
            "Arn"
          ]
        },
        "Family": "GithubActionsRunnerStackGitHubActionsRunnerTaskDefinitionC7A2B72D",
        "NetworkMode": "bridge",
        "RequiresCompatibilities": ["EC2"],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "GitHubActionsRunnerTaskDefinitionTaskRoleAF56F3C8",
            "Arn"
          ]
        },
        "Volumes": [
          {
            "Host": {
              "SourcePath": "/var/run/docker.sock"
            },
            "Name": "docker_dock"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "GithubActionsRunnerStack/GitHubActionsRunnerTaskDefinition/Resource"
      }
    },
    "GitHubActionsRunnerTaskDefinitionExecutionRoleF608A770": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "GithubActionsRunnerStack/GitHubActionsRunnerTaskDefinition/ExecutionRole/Resource"
      }
    },
    "GitHubActionsRunnerTaskDefinitionExecutionRoleDefaultPolicy58127E5F": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":ecr:eu-north-1:466464767973:repository/cdk-hnb659fds-container-assets-466464767973-eu-north-1"
                  ]
                ]
              }
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": ["logs:CreateLogStream", "logs:PutLogEvents"],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": ["ContainerLogGroupE6FD74A4", "Arn"]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "GitHubActionsRunnerTaskDefinitionExecutionRoleDefaultPolicy58127E5F",
        "Roles": [
          {
            "Ref": "GitHubActionsRunnerTaskDefinitionExecutionRoleF608A770"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "GithubActionsRunnerStack/GitHubActionsRunnerTaskDefinition/ExecutionRole/DefaultPolicy/Resource"
      }
    },
    "ContainerLogGroupE6FD74A4": {
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "aws:cdk:path": "GithubActionsRunnerStack/Container/LogGroup/Resource"
      }
    },
    "ServiceD69D759B": {
      "Type": "AWS::ECS::Service",
      "Properties": {
        "CapacityProviderStrategy": [
          {
            "CapacityProvider": "GitHubActionsRunnerCapacityProvider",
            "Weight": 1
          }
        ],
        "Cluster": {
          "Ref": "GitHubActionsRunnerCluster5CD8DD12"
        },
        "DeploymentConfiguration": {
          "DeploymentCircuitBreaker": {
            "Enable": true,
            "Rollback": true
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50
        },
        "DeploymentController": {
          "Type": "ECS"
        },
        "EnableECSManagedTags": true,
        "SchedulingStrategy": "REPLICA",
        "ServiceName": "GitHubActionsRunnerService",
        "TaskDefinition": {
          "Ref": "GitHubActionsRunnerTaskDefinitionAEB9D8FA"
        }
      },
      "Metadata": {
        "aws:cdk:path": "GithubActionsRunnerStack/Service/Service"
      }
    },
    "CDKMetadata": {
      "Type": "AWS::CDK::Metadata",
      "Properties": {
        "Analytics": "v2:deflate64:H4sIAAAAAAAA/2VSTW/bMAz9Lb0r2pL2sGuWdl2AHAw76LWgFdplbYuGKKUIDP/3yXY+vOakx6dHkdTjSj/qnw/wJQtzqBY15brLPJhKReq9Q7PS3Vtr1Kawb8lGJSGvyWQht+gH7oZSDh73kNd442/cWoQNgSe2V/EAttaji8pX8PgFp3OZc7T2sZGPBq1XGZrgyJ9eHYd2LDAnegXBsxioyZa6W8cgm4KrfgfBmo8N24LK4K6N3El3VKA5mRr/Mldj4pzoFUGju5SnKccz4fgjY+c3tLXiwRpMHBdUY69qaPID6O5P7OJSe44TdA2JxKhXYiV6EHIxjtqL4L94zy2NloygV2hixlrKDbRg4qfEskc6oBsk91wdxJ/v7uB39cw3US9mtQepnrEgS5fGvjNsPZBFN+NiXobuSGZajQkOXbt3EEEv+plNhW7bQDlsSlyoeKdTbFnIszv9BkFVcxmn3PHM0zPue5WicHBTgQQcNDjMNb4Vt7mM9o5+nVW9snxA/Sk/jssnvfyllw+fQrRwwXpqUKfT+Q9CmLjNGwMAAA=="
      },
      "Metadata": {
        "aws:cdk:path": "GithubActionsRunnerStack/CDKMetadata/Default"
      }
    }
  },
  "Parameters": {
    "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter": {
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
      "Default": "/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id"
    },
    "BootstrapVersion": {
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
    }
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  ["1", "2", "3", "4", "5"],
                  {
                    "Ref": "BootstrapVersion"
                  }
                ]
              }
            ]
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
        }
      ]
    }
  }
}
